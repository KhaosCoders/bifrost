@using System.Runtime.InteropServices

@implements IDisposable
@rendermode InteractiveAuto

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AntiforgeryStateProvider AntiforgerySP

<img src="svg/Bifrost.svg" alt="Bifrost" class="logo" />
<FluentSpacer />
<FluentStack HorizontalGap="10" HorizontalAlignment="HorizontalAlignment.Right">
    <AuthorizeView>
        <Authorized>
            <div>
                @context?.ToString()
            </div>
            <FluentButton Id="profile" Appearance="Appearance.Lightweight" IconEnd="@(new Icons.Regular.Size20.ChevronDown())" OnClick="@ToggleMenu" @onkeydown="OnKeyDown">
                @context.User.Identity?.Name
            </FluentButton>
            <FluentMenu @bind-Open="_visible" Anchor="profile">
                <div class="menuitem">
                    <FluentAnchor IconStart="@(new Icons.Regular.Size20.Person())" Appearance="Appearance.Stealth" Href="Account/Manage">Manage</FluentAnchor>
                </div>
                <div class="menuitem">
                    <form action="Account/Logout" method="post" id="logoutForm">
                        <CascadingAntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <FluentAnchor IconStart="@(new Icons.Regular.Size20.Person())" Appearance="Appearance.Stealth" Href="#" OnClick="@Logout">Logout</FluentAnchor>
                    </form>
                    <script>
                        window.submitLogoutForm = () => {
                            document.getElementById("logoutForm").submit();
                        }
                    </script>
                </div>
            </FluentMenu>
        </Authorized>
        <NotAuthorized>
            <FluentAnchor IconStart="@(new Icons.Regular.Size20.Person())" Appearance="Appearance.Stealth" Href="Account/Register">Register</FluentAnchor>
            <FluentAnchor IconStart="@(new Icons.Regular.Size20.Key())" Appearance="Appearance.Lightweight" Href="Account/Login">Login</FluentAnchor>
        </NotAuthorized>
    </AuthorizeView>

    <ThemeToggle />

    <div>
        @(AntiforgerySP.GetAntiforgeryToken()?.ToString() ?? "fehlt")
    </div>
    <div>
        <!-- Aktuelle Plattform ausgeben (Server oder WebAssembly) -->
        @if (RuntimeInformation.IsOSPlatform(OSPlatform.Create("BROWSER")))
        {
            <span>WebAssembly</span>
        }
        else
        {
            <span>Server</span>
        }
    </div>
</FluentStack>

@code {
    bool _visible;
    private string? currentUrl;

    private void ToggleMenu() => _visible = !_visible;

    private void OnKeyDown(KeyboardEventArgs args)
    {
        if (args is not null && args.Key == "Escape")
        {
            _visible = false;
        }
    }

    private void Logout() =>
        JSRuntime.InvokeVoidAsync("submitLogoutForm");

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
