@using Bifrost.Client.Features.Identity.Components.Account.Shared
@using Bifrost.Client.Features.Identity.Actions
@using Bifrost.Client.Shared.Layout

@page "/Identity/Account/Login"
@rendermode InteractiveAuto
@layout FocusedLayout
@inject NavigationManager NavigationManager
@inject ILoginAction loginAction

<PageTitle>Login - Bifrost</PageTitle>

<div class="login-page">
    <LoginBackground />

    <div>
        <div class="logo">
            <img src="svg/Bifrost.svg" alt="Bifrost" class="img-fluid" />
        </div>
    </div>

    <div class="login-dialog-container">
        <FluentCard Width="400px" Height="230px" Style="opacity: 0.95">
            <EditForm EditContext="@editContext" method="post" OnValidSubmit="SignInAsync" FormName="login" class="form-inline">
                <DataAnnotationsValidator />
                <ServerModelValidator @ref="_serverModelValidator" />
                <FluentLayout>
                    <FluentHeader>
                        Login
                    </FluentHeader>
                    <FluentBodyContent Style="margin: 10px 0px">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                            <FluentTextField @bind-Value="Input.Username" Placeholder="Username" Autofocus="true">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
                            </FluentTextField>
                            <FluentTextField @bind-Value="Input.Password" Placeholder="Password" TextFieldType="TextFieldType.Password">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Key())" Slot="start" Color="Color.Neutral" />
                            </FluentTextField>
                        </FluentStack>
                        <FluentCheckbox @bind-Value="Input.RememberMe" Label="Stay signed in" Style="margin-top: 10px" />
                    </FluentBodyContent>
                    <FluentFooter>
                        <FluentButton Type="ButtonType.Submit">Sign in</FluentButton>
                        <FluentValidationSummary />
                    </FluentFooter>
                </FluentLayout>
            </EditForm>
        </FluentCard>
    </div>
</div>

@code {
    private EditContext? editContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ServerModelValidator? _serverModelValidator;

    protected override void OnInitialized()
    {
        editContext = new(Input);
    }

    private async Task SignInAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.Username) || string.IsNullOrWhiteSpace(Input.Password))
            return;

        var result = await loginAction.LoginAsync(Input.Username, Input.Password, true, Input.RememberMe);
        if (result.Succeeded)
        {
            if (string.IsNullOrWhiteSpace(ReturnUrl))
                NavigationManager.NavigateTo("/", true);
            else
                NavigationManager.NavigateTo(ReturnUrl, true);
            return;
        }
        else if (result.RequiresTwoFactor)
        {
            // TODO: Implement two factor authentication
        }
        else if (result.IsLockedOut)
        {
            // TODO: Implement lockout
        }
        else
        {
            _serverModelValidator?.DisplayError("Password", "Error: Invalid login attempt.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}