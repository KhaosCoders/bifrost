@page "/Identity/Account/Login"
@rendermode InteractiveAuto
@layout FocusedLayout
@inject NavigationManager NavigationManager
@inject ILoginAction loginAction

<PageTitle>Login - Bifrost</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="/css/login.css" />
</HeadContent>

<div class="container h-100">
    <LoginBackground />

    <div class="h-100 d-flex align-items-center justify-content-center">
        <div class="login-dialog">
            <EditForm EditContext="@editContext" method="post" OnValidSubmit="SignInAsync" FormName="login" class="form-inline">
                <DataAnnotationsValidator />
                <ServerModelValidator @ref="_serverModelValidator" />
                <div class="input-group mb-3">
                    <span class="input-group-text" id="username-addon">
                        <span class="bi bi-person-fill"></span>
                    </span>
                    <InputText type="text" class="form-control" @bind-Value="Input.Username" placeholder="Username" aria-label="Username" aria-describedby="username-addon"></InputText>
                    <ValidationMessage For="() => Input.Username" class="invalid-feedback" />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="password-addon">
                        <span class="bi bi-key-fill"></span>
                    </span>
                    <InputText type="password" class="form-control" @bind-Value="Input.Password" placeholder="Password" aria-label="Password" aria-describedby="password-addon"></InputText>
                    <ValidationMessage For="() => Input.Password" class="invalid-feedback" />
                </div>
                <div class="form-check mb-3">
                    <InputCheckbox class="form-check-input" @bind-Value="Input.RememberMe" id="staySignedIn"></InputCheckbox>
                    <label class="form-check-label" for="staySignedIn">
                        Stay signed in
                    </label>
                </div>
                <div class="input-group">
                    <button class="btn btn-dark w-100" type="submit" id="login-submit">Sign in</button>
                </div>
            </EditForm>
            @* <StatusMessage Message="@errorMessage" /> *@
        </div>
    </div>
</div>

@code {
    private EditContext? editContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ServerModelValidator? _serverModelValidator;

    protected override void OnInitialized()
    {
        editContext = new(Input);
        editContext.SetFieldCssClassProvider(new Bifrost.Client.Utils.BootstrapValidationClassProvider());
    }

    private async Task SignInAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.Username) || string.IsNullOrWhiteSpace(Input.Password))
            return;

        var result = await loginAction.LoginAsync(Input.Username, Input.Password, true, Input.RememberMe);
        if (result.Succeeded)
        {
            if (string.IsNullOrWhiteSpace(ReturnUrl))
                NavigationManager.NavigateTo("/");
            else
                NavigationManager.NavigateTo(ReturnUrl);
            return;
        }
        else if (result.RequiresTwoFactor)
        {
            // TODO: Implement two factor authentication
        }
        else if (result.IsLockedOut)
        {
            // TODO: Implement lockout
        }
        else
        {
            _serverModelValidator?.DisplayError("Password", "Error: Invalid login attempt.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}