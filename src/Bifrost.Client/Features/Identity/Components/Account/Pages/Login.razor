@using Bifrost.Features.Identity.Components.Account.Shared
@using Bifrost.Shared.Layout
@using MediatR

@page "/Identity/Account/Login"
@rendermode InteractiveAuto
@layout FocusedLayout
@inject NavigationManager NavigationManager
@inject IMediator MediatR

<PageTitle>Login - Bifrost</PageTitle>

<div class="login-page">
    <LoginBackground />

    <div>
        <div class="logo">
            <img src="svg/Bifrost.svg" alt="Bifrost" class="img-fluid" />
        </div>
    </div>
    <div class="theme-toggle">
        <Bifrost.Shared.ThemeToggle />
    </div>

    <div class="login-dialog-container">
        <FluentCard Width="400px" Height="230px" Style="opacity: 0.95">
            <EditForm EditContext="@editContext" method="post" OnValidSubmit="SignInAsync" FormName="login" class="form-inline">
                <DataAnnotationsValidator />
                <ServerModelValidator @ref="_serverModelValidator" />
                <FluentLayout>
                    <FluentHeader>
                        Login
                    </FluentHeader>
                    <FluentBodyContent Style="margin: 10px 0px">
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                            <FluentTextField @bind-Value="Input.Username" Placeholder="Username" Autofocus="true" Id="username">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Person())" Slot="start" Color="Color.Neutral" />
                            </FluentTextField>
                            <FluentTextField @bind-Value="Input.Password" Placeholder="Password" TextFieldType="TextFieldType.Password" Id="password">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Key())" Slot="start" Color="Color.Neutral" />
                            </FluentTextField>
                        </FluentStack>
                        <FluentCheckbox @bind-Value="Input.RememberMe" Label="Stay signed in" Style="margin-top: 10px" />
                    </FluentBodyContent>
                    <FluentFooter>
                        @* Login only works WASM, not Server *@
                        @if (Runtime == "browser-wasm")
                        {
                            <FluentButton Type="ButtonType.Submit">Sign in</FluentButton>
                        }
                        else
                        {
                            @* On Server show loading indicator and reload page once the WASM runtime is prefetched *@
                            <FluentProgressRing></FluentProgressRing>
                            <script>
                                (async () => {
                                    if (typeof Module !== 'undefined' && Module.ready) {
                                        await Module.ready;
                                        location.reload();
                                    }
                                })();
                            </script>
                        }
                        <FluentValidationSummary />
                    </FluentFooter>
                </FluentLayout>
            </EditForm>
        </FluentCard>
    </div>
</div>

@code {
    private EditContext? editContext;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private ServerModelValidator? _serverModelValidator;

    private string Runtime => System.Runtime.InteropServices.RuntimeInformation.RuntimeIdentifier;

    protected override void OnInitialized()
    {
        editContext = new(Input);
    }

    private async Task SignInAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Input.Username) || string.IsNullOrWhiteSpace(Input.Password))
                return;

            var response = await MediatR.Send(new Commands.Identity.LoginCommand(Input.Username, Input.Password, true, Input.RememberMe));

            if (!response.Success)
            {
                _serverModelValidator?.DisplayError("Username", $"Error: {response.Description}");
                return;
            }
            else if (response.Data.Succeeded)
            {
                if (string.IsNullOrWhiteSpace(ReturnUrl))
                    NavigationManager.NavigateTo("/", true);
                else
                    NavigationManager.NavigateTo(ReturnUrl, true);
                return;
            }
            else if (response.Data.RequiresTwoFactor)
            {
                // TODO: Implement two factor authentication
                _serverModelValidator?.DisplayError("Username", "MFA not supported");
            }
            else if (response.Data.IsLockedOut)
            {
                _serverModelValidator?.DisplayError("Username", "Locked-Out");
            }
            else
            {
                _serverModelValidator?.DisplayError("Password", "Error: Invalid login attempt.");
            }
        }
        catch (Exception ex)
        {
            _serverModelValidator?.DisplayError("Username", $"Error: {ex.Message}");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}